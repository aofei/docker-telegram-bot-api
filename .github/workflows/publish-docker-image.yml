name: Publish Docker image
on:
  push:
  pull_request:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
jobs:
  prepare-docker-image-build-metadata:
    runs-on: ubuntu-latest
    outputs:
      docker-image-tag: ${{steps.prepare-docker-image-build-metadata.outputs.docker-image-tag}}
      docker-image-tag-http-code: ${{steps.prepare-docker-image-build-metadata.outputs.docker-image-tag-http-code}}
      docker-image-build-arg-git-commit-hash: ${{steps.prepare-docker-image-build-metadata.outputs.docker-image-build-arg-git-commit-hash}}
    steps:
      - name: Check out Telegram Bot API code
        uses: actions/checkout@v3
        with:
          repository: tdlib/telegram-bot-api
          path: telegram-bot-api
      - name: Prepare Docker image build metadata
        id: prepare-docker-image-build-metadata
        run: |
          DOCKER_IMAGE_TAG=$(grep "parameters->version_ = " telegram-bot-api/telegram-bot-api/telegram-bot-api.cpp | head -1 | grep -Eo "[0-9]+(\.[0-9])+")
          DOCKER_IMAGE_TAG_HTTP_CODE=$(curl -sL -w "%{http_code}" -o /dev/null https://hub.docker.com/v2/repositories/$DOCKER_IMAGE_REPO/tags/$DOCKER_IMAGE_TAG/)
          DOCKER_IMAGE_BUILD_ARG_GIT_COMMIT_HASH=$(cd telegram-bot-api && git rev-parse HEAD | head -1 && cd ..)
          echo "::set-output name=docker-image-tag::$DOCKER_IMAGE_TAG"
          echo "::set-output name=docker-image-tag-http-code::$DOCKER_IMAGE_TAG_HTTP_CODE"
          echo "::set-output name=docker-image-build-arg-git-commit-hash::$DOCKER_IMAGE_BUILD_ARG_GIT_COMMIT_HASH"
  build-multiarch-docker-images:
    runs-on: ubuntu-latest
    needs: prepare-docker-image-build-metadata
    strategy:
      matrix:
        platform:
          - "linux/386"
          - "linux/amd64"
          - "linux/arm/v6"
          - "linux/arm/v7"
          - "linux/arm64/v8"
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build Docker image
        run: |
          sudo docker buildx create --use
          sudo docker buildx build \
            --platform ${{matrix.platform}} \
            --build-arg GIT_COMMIT_HASH=${{needs.prepare-docker-image-build-metadata.outputs.docker-image-build-arg-git-commit-hash}} \
            --cache-to type=local,dest=docker-image-build-caches/${{matrix.platform}},mode=max \
            .
      - name: Upload Docker image build caches
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-build-caches
          path: docker-image-build-caches
  publish-docker-image:
    runs-on: ubuntu-latest
    needs: [prepare-docker-image-build-metadata, build-multiarch-docker-images]
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download Docker image build caches
        uses: actions/download-artifact@v3
        with:
          name: docker-image-build-caches
          path: docker-image-build-caches
      - name: Build and push Docker image
        run: |
          DOCKER_IMAGE_REPO=${{secrets.DOCKER_USERNAME}}/telegram-bot-api
          DOCKER_IMAGE_TAG=${{needs.prepare-docker-image-build-metadata.outputs.docker-image-tag}}
          DOCKER_IMAGE_TAG_HTTP_CODE=${{needs.prepare-docker-image-build-metadata.outputs.docker-image-tag-http-code}}
          sudo docker login --username ${{secrets.DOCKER_USERNAME}} --password ${{secrets.DOCKER_PASSWORD}}
          sudo docker buildx create --use
          sudo docker buildx build \
            --platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8 \
            --build-arg GIT_COMMIT_HASH=${{needs.prepare-docker-image-build-metadata.outputs.docker-image-build-arg-git-commit-hash}} \
            $([[ ${{github.event_name}} != "pull_request" && $DOCKER_IMAGE_TAG_HTTP_CODE == 404 ]] && echo "--push") \
            --tag $DOCKER_IMAGE_REPO:$DOCKER_IMAGE_TAG \
            --tag $DOCKER_IMAGE_REPO:latest \
            --cache-from type=local,src=docker-image-build-caches/linux/386 \
            --cache-from type=local,src=docker-image-build-caches/linux/amd64 \
            --cache-from type=local,src=docker-image-build-caches/linux/arm/v6 \
            --cache-from type=local,src=docker-image-build-caches/linux/arm/v7 \
            --cache-from type=local,src=docker-image-build-caches/linux/arm64/v8 \
            .
